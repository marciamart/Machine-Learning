{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP8sI/uWtGzInHRJ1F8CPNO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/marciamart/Machine-Learning/blob/main/Bootcamp%20Avanti%20Atlantico\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####pré-processamento em base de dados"
      ],
      "metadata": {
        "id": "umsJlSmmH6ei"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "7oG5s7vMHOvV"
      },
      "outputs": [],
      "source": [
        "# importando bibliotecas\n",
        "import pandas as pd\n",
        "from sklearn.datasets import load_iris\n",
        "import numpy as np\n",
        "\n",
        "# Carregar o conjunto de dados Iris\n",
        "iris = load_iris()\n",
        "data = iris.data\n",
        "columns = iris.feature_names\n",
        "\n",
        "df = pd.DataFrame(data, columns=columns)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "######remoção de valores ausentes"
      ],
      "metadata": {
        "id": "MJx0DcZEHlbM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mostrar informações sobre valores ausentes antes da remoção\n",
        "print(\"Valores ausentes antes da remoção:\")\n",
        "print(df.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nuGrVB81HvN8",
        "outputId": "a70cc8ed-34bb-486e-fbf9-8f9c18860e88"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valores ausentes antes da remoção:\n",
            "sepal length (cm)    0\n",
            "sepal width (cm)     0\n",
            "petal length (cm)    0\n",
            "petal width (cm)     0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "######normalização de dados"
      ],
      "metadata": {
        "id": "AA4d9_zOIE6U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# importando biblioteca\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Criar um objeto MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# Criar um DataFrame do Pandas com os dados do conjunto Iris\n",
        "df = pd.DataFrame(data, columns=columns)\n",
        "\n",
        "# Ajustar e transformar os dados do DataFrame\n",
        "normalized_data = scaler.fit_transform(df)\n",
        "\n",
        "# Criar um novo DataFrame com os dados normalizados\n",
        "df_normalized = pd.DataFrame(normalized_data, columns=columns)\n",
        "\n",
        "# Mostrar os primeiros registros do DataFrame normalizado\n",
        "print(df_normalized.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yYEiHcziIMOP",
        "outputId": "3a007da4-28ec-48ec-c089-76ae3147cfa0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
            "0           0.222222          0.625000           0.067797          0.041667\n",
            "1           0.166667          0.416667           0.067797          0.041667\n",
            "2           0.111111          0.500000           0.050847          0.041667\n",
            "3           0.083333          0.458333           0.084746          0.041667\n",
            "4           0.194444          0.666667           0.067797          0.041667\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "######codificação de váriaveis categóricas"
      ],
      "metadata": {
        "id": "dKGyRkMtIns6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "target = iris.target\n",
        "# Criar um DataFrame do Pandas com os dados do conjunto Iris\n",
        "df = pd.DataFrame(data, columns=columns)\n",
        "# Adicionar a coluna alvo (variável categórica) ao DataFrame\n",
        "df['species'] = target\n",
        "# Mapear os valores numéricos das espécies para seus nomes correspondentes\n",
        "species_mapping = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}\n",
        "df['species'] = df['species'].map(species_mapping)\n",
        "# Realizar a codificação one-hot das variáveis categóricas\n",
        "df_encoded = pd.get_dummies(df, columns=['species'], prefix=['species'])\n",
        "# Mostrar os primeiros registros do DataFrame codificado\n",
        "print(df_encoded.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SEyXC4DPIvKv",
        "outputId": "b75056d7-f7f7-4a24-ddcc-32322fd9ac32"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
            "0                5.1               3.5                1.4               0.2   \n",
            "1                4.9               3.0                1.4               0.2   \n",
            "2                4.7               3.2                1.3               0.2   \n",
            "3                4.6               3.1                1.5               0.2   \n",
            "4                5.0               3.6                1.4               0.2   \n",
            "\n",
            "   species_setosa  species_versicolor  species_virginica  \n",
            "0            True               False              False  \n",
            "1            True               False              False  \n",
            "2            True               False              False  \n",
            "3            True               False              False  \n",
            "4            True               False              False  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "######detectação e tratamento de outiliers"
      ],
      "metadata": {
        "id": "DLGH50L5JA3I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''Criar um DataFrame do Pandas\n",
        "com os dados do conjunto Iris'''\n",
        "df = pd.DataFrame(data, columns=columns)\n",
        "'''Simular outliers adicionando valores\n",
        "extremos em algumas entradas'''\n",
        "np.random.seed(42)\n",
        "outliers_mask = np.random.choice(\n",
        "    [True, False],\n",
        "    size=df.shape, p=[0.05, 0.95]\n",
        ")\n",
        "df_with_outliers = df.copy()\n",
        "df_with_outliers.loc[outliers_mask] = df_with_outliers.loc[outliers_mask] * 10\n",
        "'''Mostrar estatísticas resumidas antes\n",
        "do tratamento de outliers\n",
        "'''\n",
        "print(\"Estatísticas resumidas antes do tratamento de outliers:\")\n",
        "print(df_with_outliers.describe())\n",
        "\n",
        "def remove_outliers_iqr(data, threshold=1.5):\n",
        "    q1 = data.quantile(0.25)\n",
        "    q3 = data.quantile(0.75)\n",
        "    iqr = q3 - q1\n",
        "    lower_bound = q1 - threshold * iqr\n",
        "    upper_bound = q3 + threshold * iqr\n",
        "    return data[(data >= lower_bound) & (data <= upper_bound)]\n",
        "\n",
        "'''\n",
        "Aplicar a detecção e tratamento de\n",
        "outliers usando IQR para cada coluna.\n",
        "'''\n",
        "for col in df_with_outliers.columns:\n",
        "    df_with_outliers[col] = remove_outliers_iqr(df_with_outliers[col])\n",
        "\n",
        "'''\n",
        "Mostrar estatísticas resumidas\n",
        "após o tratamento de outliers.\n",
        "'''\n",
        "print(\"\\nEstatísticas resumidas após o tratamento de outliers:\")\n",
        "print(df_with_outliers.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "say_01KmJHyQ",
        "outputId": "05d3db7b-4d19-4ba0-a678-b8314e2b58cc"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estatísticas resumidas antes do tratamento de outliers:\n",
            "       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n",
            "count         150.000000        150.000000          150.00000   \n",
            "mean           16.787333          8.805333           10.84400   \n",
            "std            21.838585         11.493931           16.13388   \n",
            "min             4.300000          2.000000            1.00000   \n",
            "25%             5.225000          2.900000            1.70000   \n",
            "50%             6.200000          3.200000            4.70000   \n",
            "75%             7.200000          3.800000            6.07500   \n",
            "max            77.000000         41.000000           69.00000   \n",
            "\n",
            "       petal width (cm)  \n",
            "count        150.000000  \n",
            "mean           3.497333  \n",
            "std            5.809249  \n",
            "min            0.100000  \n",
            "25%            0.425000  \n",
            "50%            1.500000  \n",
            "75%            2.100000  \n",
            "max           24.000000  \n",
            "\n",
            "Estatísticas resumidas após o tratamento de outliers:\n",
            "       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n",
            "count         119.000000        119.000000         120.000000   \n",
            "mean            5.832773          3.048739           3.813333   \n",
            "std             0.840209          0.436252           1.918242   \n",
            "min             4.300000          2.000000           1.000000   \n",
            "25%             5.100000          2.800000           1.575000   \n",
            "50%             5.700000          3.000000           4.400000   \n",
            "75%             6.400000          3.300000           5.125000   \n",
            "max             7.900000          4.400000          12.000000   \n",
            "\n",
            "       petal width (cm)  \n",
            "count        129.000000  \n",
            "mean           1.252713  \n",
            "std            0.768631  \n",
            "min            0.100000  \n",
            "25%            0.400000  \n",
            "50%            1.300000  \n",
            "75%            1.900000  \n",
            "max            3.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "######redução de dimensionalidade"
      ],
      "metadata": {
        "id": "CS4c5VntJ_kp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# PCA para redução de dimensionalidade\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "# Escolhendo 2 componentes principais\n",
        "pca = PCA(n_components=2)\n",
        "pca_result = pca.fit_transform(df)\n",
        "# Criando um novo DataFrame com os componentes principais\n",
        "df_pca = pd.DataFrame(\n",
        "    data=pca_result,\n",
        "    columns=['PC1', 'PC2']\n",
        ")\n",
        "# Adicionando a coluna de rótulos ao DataFrame PCA\n",
        "df_pca['target'] = target\n",
        "# Plotando os dados reduzidos para visualização\n",
        "plt.figure(figsize=(10, 6))\n",
        "targets = [0, 1, 2]\n",
        "colors = ['r', 'g', 'b']\n",
        "for target, color in zip(targets, colors):\n",
        "    indices_to_keep = df_pca['target'] == target\n",
        "    plt.scatter(\n",
        "        df_pca.loc[indices_to_keep, 'PC1'],\n",
        "        df_pca.loc[indices_to_keep, 'PC2'],\n",
        "        c=color,\n",
        "        s=50\n",
        " )\n",
        "plt.legend(targets, title='Classes')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.title('PCA - Redução de Dimensionalidade do Conjunto de Dados Iris')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        },
        "id": "nXoEEhrpJTvW",
        "outputId": "50d57335-e11e-4ee1-be8e-c2123b803c53"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "######balanceamento de classes"
      ],
      "metadata": {
        "id": "nO6yQdRTKoLi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils import resample\n",
        "iris_df = pd.DataFrame(\n",
        "    data=iris.data,\n",
        "    columns=iris.feature_names\n",
        ")\n",
        "iris_df['target'] = iris.target\n",
        "'''desbalanceando o conjunto de dados\n",
        "removendo algumas amostras da classe 0.'''\n",
        "class_0_indices = iris_df[iris_df['target'] == 0].index\n",
        "random_indices_to_remove = np.random.choice(\n",
        "    class_0_indices,\n",
        "    size=40,\n",
        "    replace=False\n",
        ")\n",
        "unbalanced_df = iris_df.drop(random_indices_to_remove)\n",
        "\n",
        "'''contagem de amostras em cada classe\n",
        "após o desbalanceamento.'''\n",
        "unbalanced_class_counts = unbalanced_df['target'].value_counts()\n",
        "print(\"Contagem de amostras em cada classe após o desbalanceamento:\")\n",
        "print(unbalanced_class_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oJpCIageKrqW",
        "outputId": "2548593b-efc8-477e-c6c7-c28e43a2c120"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Contagem de amostras em cada classe após o desbalanceamento:\n",
            "target\n",
            "1    50\n",
            "2    50\n",
            "0    10\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "realizando oversampling da classe\n",
        "minoritária (classe 0) para balancear.\n",
        "'''\n",
        "class_0 = unbalanced_df[\n",
        "    unbalanced_df['target'] == 0]\n",
        "class_1 = unbalanced_df[\n",
        "    unbalanced_df['target'] == 1]\n",
        "class_2 = unbalanced_df[\n",
        "    unbalanced_df['target'] == 2]\n",
        "\n",
        "'''\n",
        "Realizar oversampling da classe 0 para\n",
        "igualar o número de amostras das classes 1 e 2.\n",
        "'''\n",
        "class_0_oversampled = resample(\n",
        "       class_0,\n",
        "       replace=True,\n",
        "       n_samples=class_1.shape[0],\n",
        "       random_state=42\n",
        ")\n",
        "class_2_oversampled = resample(\n",
        "    class_2,\n",
        "    replace=True,\n",
        "    n_samples=class_1.shape[0],\n",
        "    random_state=42\n",
        ")\n",
        "# Combinar as classes balanceadas\n",
        "balanced_df = pd.concat([\n",
        "    class_0_oversampled,\n",
        "    class_1, class_2_oversampled\n",
        "])\n",
        "# Embaralhar as amostras\n",
        "balanced_df = balanced_df.sample(\n",
        "    frac=1,\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "\n",
        "'''Verificar a contagem de amostras em\n",
        "cada classe após o balanceamento.'''\n",
        "balanced_class_counts = balanced_df['target'].value_counts()\n",
        "print(\"\\nContagem de amostras em cada classe após o balanceamento:\")\n",
        "print(balanced_class_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "anpUOUfaK5vi",
        "outputId": "4852e947-df3a-4587-aeac-d5f234e50832"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Contagem de amostras em cada classe após o balanceamento:\n",
            "target\n",
            "1    50\n",
            "0    50\n",
            "2    50\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    }
  ]
}